  
  [1X2 [33X[0;0YGetting Started[133X[101X
  
  
  [1X2.1 [33X[0;0YGetting Started[133X[101X
  
  [33X[0;0YThis  section  contains  a simple example which demonstrates some of the key
  functionality of Gurobify. We demonstrate the following:[133X
  
  [30X    [33X[0;6YCreation  of  a  Gurobi model, including specifying variable types and
        names[133X
  
  [30X    [33X[0;6YAdding  an  objective  function  to  the  model and choosing its sense
        (maximise or minimise)[133X
  
  [30X    [33X[0;6YAdding constraints to a model individually[133X
  
  [30X    [33X[0;6YAdding multiple constraints to a model at one time[133X
  
  [30X    [33X[0;6YDeleting constraints from a model[133X
  
  [30X    [33X[0;6YOptimizing a model[133X
  
  [30X    [33X[0;6YQuerying the optimisation status of a model[133X
  
  [30X    [33X[0;6YDisplaying the solution to a feasible model[133X
  
  [30X    [33X[0;6YSetting a parameter (in this case the time limit)[133X
  
  [30X    [33X[0;6YQuerying the current value of a parameter (again, the time limit)[133X
  
  [30X    [33X[0;6YWriting a model to a file[133X
  
  [30X    [33X[0;6YReading a model from a file[133X
  
  [33X[0;0YThe purpose of this example is to illustrate the use of Gurobify in a quick,
  simple  manner.  The  example  itself  is  trivial,  but the same proceedure
  applies  for  much  more  complex  models. It only utilises some of the core
  commands available in Gurobify, though more commands are listed in detail in
  Chapter  3  "Using  Gurobify",  and  further examples are given in Chapter 4
  "Examples".[133X
  
  
  [1X2.2 [33X[0;0YSimple example[133X[101X
  
  [33X[0;0YThe  first step in using gurobify is to create a model. To do this, we first
  need  to define the types of variables that are to be used in the model, and
  we may optionally give them names. In this case we create a model with three
  binary  variables,  called [23Xx[123X, [23Xy[123X and [23Xz[123X. We then define the objective function
  as [23Xx + 2 y + z[123X, which we set to be maximised.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xmodel := GurobiNewModel(["BINARY", "BINARY", "BINARY"], ["x", "y", "z"]);[127X[104X
    [4X[28X<object>[128X[104X
    [4X[25Xgap>[125X [27XGurobiSetObjectiveFunction( model, [1.,2.,1.] );[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiMaximiseModel(model);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YHaving  defined our model, we can now add constraints. To do this, a list of
  the coefficients for each of the variables is given, along with the sense of
  the  equation (that is, [23X=[123X, [23X\le[123X or [23X\ge[123X), and the value on the right hand side
  of  the  constraint,  and optionally a name for the constraints. Gurobi does
  not distinguish between [23X\le[123X and [23X<[123X or [23X\ge[123X and [23X>[123X, though we note that gurobify
  only  accepts the form [23X<[123X or [23X>[123X. We add constraints the [23X2x + 2y + 2z \le 6[123X and
  [23Xx + 2y + 3z \ge 5[123X to our model. We do not assign them names.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiAddConstraint(model, [2, 2, 2], "<", 6 );[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiAddConstraint(model, [1, 2, 3], ">", 5 );[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YAlternatively,    the   previous   constraints   could   have   been   added
  simultaneously, by containing multiple constraints as entries of a list.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xconstraints :=  [[2, 2, 2], [1, 2, 3]];[127X[104X
    [4X[28X[ [ 2, 2, 2 ], [ 1, 2, 3 ] ][128X[104X
    [4X[25Xgap>[125X [27Xsense := ["<", ">"];[127X[104X
    [4X[28X[ "<", ">" ][128X[104X
    [4X[25Xgap>[125X [27Xrhs := [6,5];[127X[104X
    [4X[28X[ 6, 5 ][128X[104X
    [4X[25Xgap>[125X [27XGurobiAddMultipleConstraints( model, constraints, sense, rhs );[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  can now optimize the model. This will return an Gurobi opimiztion status
  code.  More  information on the status codes can be found in the Appendix. A
  status  code of [23X2[123X lets us know that the model was successfully optimized. We
  may then query the model's solution.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(model);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XGurobiSolution(model);[127X[104X
    [4X[28X[ 1., 1., 1. ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YIn   addition   to   returning   the   optimisation  status  upon  finishing
  optimisation,  we  can  query the optimisation status of a model directly at
  any point in time. It will give the status of the model at the point when it
  was last optimised.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizationStatus(model);[127X[104X
    [4X[28X2[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  can reset any information found on a model to its pre-optimization stat.
  If we then check its status, it will tell us that the model has been loaded,
  but no optimization information is available.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiReset(model);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizationStatus(model);[127X[104X
    [4X[28X1[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  can change the objective sense of the model so that Gurobi will look for
  a  solution which minimises the objective function instead. We then optimise
  the model and, if the optimisation is succesful, retun the solution.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiMinimiseModel(model);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(model);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XGurobiSolution(model);                                [127X[104X
    [4X[28X[ 0., 1., 1. ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  can  write  the  model to a file so that we may use it later. We need to
  specify the file name, and the extension of the file name will determine the
  type of file written. In this case we write the model to an lp file which we
  call "test.lp".[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiWriteToFile(model, "test.lp");[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIt is also possible to read a model directly from a file. In this case it is
  not  necessary  to  build  the model from the ground up. We will read in the
  model from the "test.lp" file that we created in the previous step.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xre_model := GurobiReadModel("test.lp");[127X[104X
    [4X[28X<object>[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  now  add  another  constraint, [23Xx + y + z > 3[123X, to the model. Since we may
  want to remove this constraint later we give it the name "Other Constraint".
  We optimise the model and since it returns a feasible optimisation status we
  return the solution.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiAddConstraint(re_model, [1, 1, 1], ">", 3, "Other Constraint");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(re_model);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XGurobiSolution(re_model);[127X[104X
    [4X[28X[ 1., 1., 1. ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  add  another constraint, [23Xy + z < 1[123X, to the model and also call it "Other
  Constraint".  We  optimise the model, and get a status code of [23X3[123X, indicating
  that the model has no feasible solutions.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiAddConstraint(re_model, [0, 1, 1], "<", 1, "Other Constraint");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(re_model);[127X[104X
    [4X[28X3[128X[104X
  [4X[32X[104X
  
  [33X[0;0YSince  we  named  the  two  additional constraints, we can delete them. This
  makes our model feasible again, and we get the same solution as before.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiDeleteConstraintsWithName(re_model, "Other Constraint");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(re_model);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XGurobiSolution(re_model);[127X[104X
    [4X[28X[ 0., 1., 1. ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YThere  are  many parameters and attributes of Gurobi models which can be set
  and  queried. For example, we may set the time limit to something very small
  so that Gurobi terminates before finishing optimising. This returns a status
  code of [23X9[123X. We may then change the time limit again to allow Gurobi more time
  to  finish  optimising  and thus obtain a feasible solution again. Chapter 3
  documents other parameters and attributes that Gurobify is able to modify.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiSetTimeLimit(re_model, 0.000001);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(re_model); [127X[104X
    [4X[28X9[128X[104X
    [4X[25Xgap>[125X [27XGurobiSetTimeLimit(re_model, 10);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XGurobiOptimizeModel(re_model);[127X[104X
    [4X[28X2[128X[104X
  [4X[32X[104X
  
  [33X[0;0YWe  can query the model to find out what the current time limit value is set
  to.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGurobiTimeLimit(re_model);[127X[104X
    [4X[28X10.[128X[104X
  [4X[32X[104X
  
