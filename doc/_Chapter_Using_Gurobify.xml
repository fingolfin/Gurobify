<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Using_Gurobify">
<Heading>Using Gurobify</Heading>

<P/>
	This chapter documents the various commands available in Gurobify. Each command begins with "Gurobi", which in some instances helps to avoid conflict with other &GAP; commands, and is used for consistancy in other instances. It is important to note that many changes to a model do not become active until the model is updated. This can be done by either optimising the model, or calling GurobiUpdateModel. It is often unnecessary to update the model if it will later be optimised, and in fact can be more efficient to only update when necessary. However, one may occasionally wish to perform a command which is dependent on previous changes to the model. In this case it is necessary to call the update command first.
<P/>
<Section Label="Chapter_Using_Gurobify_Section_Creating_Or_Reading_A_Model">
<Heading>Creating Or Reading A Model</Heading>

<P/>
	This section deals with reading, writing, and creating models, as well as working with the model variables.
<P/>
<ManSection>
  <Func Arg="ModelFile" Name="GurobiReadModel" />
 <Returns>a Gurobi model.
</Returns>
 <Description>
  Takes a model file, reads it and creates a Gurobi model from it.
  ModelFile is the name of the file as a string, with the appropriate extension,
  and including the path if the file is not located in the current GAP working directory.
  Gurobi accepts files of type .mps, .rew, .lp, .rlp, .ilp, or .opb.
  Refer to the gurobi documentation for more infomation on which file types can be read.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, FileName" Name="GurobiWriteToFile" />
 <Returns>true
</Returns>
 <Description>
  Takes a model and writes it to a file. File type written is determined by the FileName suffix.
	File types include .mps, .rew, .lp, .rlp, .ilp, .sol, or .prm.
  Refer to the gurobi documentation for more infomation on which file types can be written.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="VariableTypes[, VariableNames]" Name="GurobiNewModel" Label="for IsList, IsList"/>
 <Returns>A Gurobi model
</Returns>
 <Description>
  Creates a gurobi model with variables defined by VariableTypes. VariableTypes must be a list of strings, 
	where each entry is the type of the corresponding variable.
  Accepted variable types are "CONTINUOUS", "BINARY", "INTEGER", "SEMICONT", or "SEMIINT". The variable types are not case sensitive.
  Refer to the Gurobi documentation for more information on the variable types.
  Optionally takes the names of the variables as a list of strings.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="n, VariableType" Name="GurobiNewModel" Label="for IsPosInt, IsString"/>
 <Returns>A Gurobi model
</Returns>
 <Description>
  Creates a new Gurobi model, with n variables, all of type VariableType.
  Accepted variable types are "CONTINUOUS", "BINARY", "INTEGER", "SEMICONT", or "SEMIINT". The variable types are not case sensitive.
  Refer to the Gurobi documentation for more information on the variable types.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, VariableNames" Name="GurobiSetVariableNames" Label="for IsGurobiModel, IsList"/>
 <Returns>true
</Returns>
 <Description>
  Assigns each variable a new name from a list of names. The names must be strings. 
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Adding_And_Deleting_Constraints">
<Heading>Adding And Deleting Constraints</Heading>

<P/>
	This section deals with adding linear constraints, both individually and in bulk, and also naming and deleting constraints.
<P/>
<ManSection>
  <Func Arg="Model, ConstraintName" Name="GurobiDeleteSingleConstraintWithName" />
 <Returns>true
</Returns>
 <Description>
	Deletes a single constraint from a model with the name ConstraintName. If multiple constraints have this name,
	then one will be deleted at random.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, ConstraintName" Name="GurobiDeleteConstraints" />
 <Returns>true
</Returns>
 <Description>
	Deletes all constraints from a model which are indexed by the values of ConstraintList.
	Requires an update to the model to take effect.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ConstraintName" Name="GurobiDeleteConstraintsWithName" Label="for IsGurobiModel, IsString"/>
 <Returns>true/false
</Returns>
 <Description>
	Deletes all constraints with the name ConstraintName
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ConstraintEquation, ConstraintSense, ConstraintRHSValue[, ConstraintName]" Name="GurobiAddConstraint" Label="for IsGurobiModel, IsList, IsString, IsInt, IsString"/>
 <Returns>true
</Returns>
 <Description>
	Same as below, except that ConstraintRHS value takes an integer value.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ConstraintEquation, ConstraintSense, ConstraintRHSValue[, ConstraintName]" Name="GurobiAddConstraint" Label="for IsGurobiModel, IsList, IsString, IsFloat, IsString"/>
 <Returns>true
</Returns>
 <Description>
	Adds a constraint to a gurobi model. ConstraintEquation must be a list, 
	such that each entry is the coefficient (including <Math>0</Math> coefficents) of the corresponding variable
 	in the constraint equation. The ConstraintSense must be one of "&lt;", "&gt;" or "=",
	where Gurobi interprets &lt; as &lt;= and &gt; as &gt;=. The ConstraintRHSValue is the value on the
	right hand side of the constraint. A constraint may optionally be given a name, which helps to identify
	the constraint if it is to be deleted at some point. If no constraint name is given, then a constraint is
	simply assigned the name "UnNamedConstraint".
	Note that a model must be updated or optimised before any additional constraints become effective.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ConstraintEquations, ConstraintSenses, ConstraintRHSValues[, ConstraintNames]" Name="GurobiAddMultipleConstraints" Label="for IsGurobiModel, IsList, IsList, IsList, IsList"/>
 <Returns>true
</Returns>
 <Description>
	Add multiple constraints to a model at one time. The arguments (except Model)
	are lists, such that the i-th entries of each list determine a single constraint in
	the same manner as for the operation GurobiAddConstraint. ConstraintNames is an optional argument,
	and must be given for all constraints, or not at all.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ConstraintEquations, ConstraintSense, ConstraintRHSValue[, ConstraintName]" Name="GurobiAddMultipleConstraints" Label="for IsGurobiModel, IsList, IsString, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Add multiple constraints to a model at one time, where the sense, rhs, and optionally name, of 
  each constraint is the same. ConstraintEquations must be a list of constraints, ConstraintSense must
  be a string, ConstraintRHSValue must be a float or an integer. 
  ConstraintName is an optional argument, which if given, must be a string.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Adding_And_Modifying_Objective_Functions">
<Heading>Adding And Modifying Objective Functions</Heading>

<P/>
	This section deals with adding and modifying objective functions to a model, and changing between maximising and minimising objective functions.
<P/>
<ManSection>
  <Oper Arg="Model" Name="GurobiMaximiseModel" Label="for IsGurobiModel"/>
 <Returns>true
</Returns>
 <Description>
	Sets the model sense to maximise. When the model is optimised, it will try to maximise the objective function.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiMinimiseModel" Label="for IsGurobiModel"/>
 <Returns>true
</Returns>
 <Description>
	Sets the model sense to minimise. When the model is optimised, it will try to minimise the objective function.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ObjectiveValues" Name="GurobiSetObjectiveFunction" Label="for IsGurobiModel, IsList"/>
 <Returns>true
</Returns>
 <Description>
	Set the objective function for a model. ObjectiveValues is a list of coefficients (including <Math>0</Math> coefficeints)
	corresponding to each of the variables
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiObjectiveFunction" Label="for IsGurobiModel"/>
 <Returns>List of coefficients of the objective function
</Returns>
 <Description>
	View the objective function for a model.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Optimising_A_Model">
<Heading>Optimising A Model</Heading>

<P/>
	This section deals with optimising a model, and handling solution information.
<P/>
<ManSection>
  <Func Arg="Model" Name="GurobiOptimiseModel" />
 <Returns>Optimisation status code.
</Returns>
 <Description>
  Takes a Gurobi model and optimises it. Returns the optimisation status code which indicates
	the outcome of the optimisation. A status code of 2 indicates that a feasible solution was found,
	a status code of 3 indicates the model is infeasible. There a number of other status codes.
	Refer to the Gurobi documentation for more information about status codes, or alternatively see the Appendix of this manual.
	The model itself is altered to reflect the optimisation, and more information about it can be obatained using other commands,
	in particular the GurobiSolution and GurobiObjectiveValue functions.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model" Name="GurobiReset" />
 <Returns>true
</Returns>
 <Description>
	Reset all information associated with an optimisation of the model, such as the optimisation status,
	the solution and the objective value.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model" Name="GurobiUpdateModel" />
 <Returns>true
</Returns>
 <Description>
  Takes a model and updates it. Changes to a model (such as changes to parameters or constraints) are not processed
	until the model is either updated or optimised. 
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiSolution" Label="for IsGurobiModel"/>
 <Returns>Solution
</Returns>
 <Description>
	Display the solution found for a successfuly optimised model. Note that if a solution has not been optimised, is infeasible, or
	the optimisation was not completed, then this will return an error. Thus it is advisable to first check the optimisation status.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiObjectiveValue" Label="for IsGurobiModel"/>
 <Returns>objective value
</Returns>
 <Description>
	Returns the objective value of the current solution.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiOptimisationStatus" Label="for IsGurobiModel"/>
 <Returns>optimisation status code
</Returns>
 <Description>
	Returns the optimisation status code of the most recent optimisation. Refer to the Gurobi documentation for more
	on the optimisation statuses, or alternatively refer to the Appendix of this manual.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, Size" Name="GurobiFindAllBinarySolutions" Label="for IsGurobiModel, IsPosInt"/>
 <Returns>Set of all solutions.
</Returns>
 <Description>
	This function finds all possible solutions of a given size, for a model with only binary variables.
	Takes a Gurobi model and repeatedly optimises it, each time adding the previous solution as a
	constraint so that it isn't found again. This continues until all solutions are found, and
	then they are returned as a set. During the process the number of found solutions is displayed.
	Note:
		- Only for models where every variable is a binary variable.
		- Only finds solution sets of a given size.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, Size, Group" Name="GurobiFindAllBinarySolutions" Label="for IsGurobiModel, IsPosInt, IsGroup"/>
 <Returns>Set of all solutions.
</Returns>
 <Description>
	This function finds all possible solutions of a given size, for a model with only binary variables.
	Same as above, except that it also takes a permutation group acting on the index set of variables.
	Instead of finding all solutions directly, the group is used to find the orbit of each new
	solution, and these are then all returned at the end, and used as constraints until then.
	An option value may also be given which will only return the representatives of each orbit of the
	solutions. Hence it returns all the unique solutions up to equivalence under the group.
	This saves on memory, and the remaing solutions may be refound by generating the
	orbit under the group. To invoke this option place a colon after the group argument and then put
	representatives:=true so for example GurobiFindAllSolutions(model, size, gp : representatives:=true);
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Querying_Attributes_And_Parameters">
<Heading>Querying Attributes And Parameters</Heading>

<P/>
	This section deals with obtaining information about attributes and parameters of a Gurobi model. Note that a model must be updated or optimised before parameters and attributes are updated - any queries will return the values at the time the model was last updated or optimised. Note also that the attributes are Gurobi attributes, and are not true attributes in the &GAP; sense. Crucially, attributes for a model constantly change, either as a result of optimisation or from manually setting them. Thus attributes for Gurobi models are approximated by Gurobify using &GAP; operations or functions. Their usage should still be comfortable for users familiar with &GAP; attributes.
<P/>
<ManSection>
  <Oper Arg="Model" Name="GurobiNumberOfVariables" Label="for IsGurobiModel"/>
 <Returns>Number of variables
</Returns>
 <Description>
	Returns the number of variables in the model.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiNumberOfConstraints" Label="for IsGurobiModel"/>
 <Returns>Number of linear constraints
</Returns>
 <Description>
	Returns the number of linear constraints in the model.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiObjectiveBound" Label="for IsGurobiModel"/>
 <Returns>objective bound
</Returns>
 <Description>
	Returns the best known bound on the objective value of the model.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiRunTime" Label="for IsGurobiModel"/>
 <Returns>run time of optimisation
</Returns>
 <Description>
	Returns the wall clock runtime in seconds for the most recent optimisation.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiNumericFocus" Label="for IsGurobiModel"/>
 <Returns>numeric focus
</Returns>
 <Description>
	Returns the numeric focus value of the model. The numeric focus is a value in the set [0,1,2,3]. A numeric focus of <Math>0</Math> sets the
	numeric focus automatically, preferencing speed. Values between 1 and 3 increase the care taken in computations 
	as the value increases, but also take longer. The default value is 0.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiTimeLimit" Label="for IsGurobiModel"/>
 <Returns>time limit
</Returns>
 <Description>
	Returns the time limit for the model. The default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiCutOff" Label="for IsGurobiModel"/>
 <Returns>cutoff value
</Returns>
 <Description>
	Returns the cutoff value for the model. Optimisation will terminate if the objective value is worse than CutOff.
	The default value is infinity for minimisation, and negative infinity for maximisation.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiBestObjectiveBoundStop" Label="for IsGurobiModel"/>
 <Returns>best objective bound limit value
</Returns>
 <Description>
	Returns the best objective bound limit value for the model.
	Optimisation will terminate if a feasible solution is found with objective value at least as good as the best objective bound.
	The default value is negative infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiMIPFocus" Label="for IsGurobiModel"/>
 <Returns>MIP focus
</Returns>
 <Description>
	Returns the MIP focus value for the model. The mip focus must be in the set [0,1,2,3], and the default value is 0.
	The MIP focus alows you to prioritise finding solutions or proving their optimality.  See the Gurobi 
	documentation for more information.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiBestBoundStop" Label="for IsGurobiModel"/>
 <Returns>Best bound stopping value
</Returns>
 <Description>
	Returns the best bound stopping value for the model. Optimisation terminates as soon as the value
	of the best bound is determined to be at least as good as the best bound stopping value. Default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiSolutionLimit" Label="for IsGurobiModel"/>
 <Returns>solution limit value
</Returns>
 <Description>
	Returns the solution limit value for the model. This value limits the maximum number of MIP solutions that will be found.
	Default value is <Math>2,000,000,000</Math>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiIterationLimit" Label="for IsGurobiModel"/>
 <Returns>Iteration limit
</Returns>
 <Description>
	Returns the iteration limit value for the model, which limits the number of simplex iterations performed during optimisation.
	Default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiNodeLimit" Label="for IsGurobiModel"/>
 <Returns>Node limit
</Returns>
 <Description>
	Returns the node limit value for the model, which limits the number of MIP nodes explored during optimisation.
	The default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiVariableNames" Label="for IsGurobiModel"/>
 <Description>
	Returns the names of the variables in the model. This list acts as the index set for
	any lists of variable coefficients, such as in GurobiAddConstraint or GurobiSetObjectiveFunction.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiLogToConsole" Label="for IsGurobiModel"/>
 <Returns>true/false
</Returns>
 <Description>
	Returns true if the Gurobi output is set to display to the screen, and false if the output is supressed.
	Gurobify suppresses the output by default.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiVariableTypes" Label="for IsGurobiModel"/>
 <Description>
	Returns the types of the variables in the model.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiMethod" Label="for IsGurobiModel"/>
 <Returns>MethodType
</Returns>
 <Description>
	Returns the method used to solve a model. See the Gurobi documentation for more details.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model" Name="GurobiThreads" Label="for IsGurobiModel"/>
 <Returns>ThreadCount
</Returns>
 <Description>
	Returns number of threads Gurobi is allowed to use. See the Gurobi documentation for more details.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Querying_Other_Attributes_And_Parameters">
<Heading>Querying Other Attributes And Parameters</Heading>

<P/>
	In addition to the specific queries given in the previous section, other gurobi parameters and attributes of specific value types can also be queried. The parameter or attribute name must be given as a string exactly as stated in the Gurobi documentation. See the Appendix for links to the relevant documentation.
<P/>
<ManSection>
  <Func Arg="Model, ParameterName" Name="GurobiIntegerParameter" />
 <Returns>parameter value
</Returns>
 <Description>
	Takes a Gurobi model and retrieves the value of a integer-valued parameter.
	Refer to the Gurobi documentation for a list of parameters and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, ParameterName" Name="GurobiDoubleParameter" />
 <Returns>parameter value
</Returns>
 <Description>
	Takes a Gurobi model and retrieves the value of a double-valued parameter.
	Refer to the Gurobi documentation for a list of parameters and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiIntegerAttribute" />
 <Returns>attribute value
</Returns>
 <Description>
	Takes a Gurobi model and retrieves the value of an integer-valued attribute.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, position, AttributeName" Name="GurobiStringAttributeElement" />
 <Returns>attribute value
</Returns>
 <Description>
	Takes a Gurobi model and retrieves the value of a string attribute element at a given position.
	For example to get the names of constraints with "ConstrName".
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiDoubleAttribute" />
 <Returns>attribute value
</Returns>
 <Description>
	Takes a Gurobi model and retrieves the value of a double-valued attribute.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiIntegerAttributeArray" />
 <Returns>attribute array
</Returns>
 <Description>
	Takes a Gurobi model and retrieves an attribute array.
	Can only get values of attributes arrays which take integer values.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiDoubleAttributeArray" />
 <Returns>attribute array
</Returns>
 <Description>
	Takes a Gurobi model and retrieves an attribute array.
	Can only get values of attributes arrays which take double values.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiStringAttributeArray" />
 <Returns>attribute array
</Returns>
 <Description>
	Takes a Gurobi model and retrieves an attribute array.
	Can only get values of attributes arrays which have string values.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName" Name="GurobiCharAttributeArray" />
 <Returns>attribute array
</Returns>
 <Description>
	Takes a Gurobi model and retrieves an attribute array.
	Can only get values of attributes arrays which have char values.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Modifying_Attributes_And_Parameters">
<Heading>Modifying Attributes And Parameters</Heading>

<P/>
	This section deals with modifying the values of attributes and parameters of Gurobi models. Note that a model must be updated or optimised before parameters and attributes are updated. Any queries or commands which depend on these values will use the values at the time the model was last updated or optimised, even if the values have since been modified.
<P/>
<ManSection>
  <Oper Arg="Model, TimeLimit" Name="GurobiSetTimeLimit" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Set a time limit for a Gurobi model. Note that TimeLimit should be a float, however an integer value can be given
	which will be automatically converted to a float.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, BestObjectiveBoundStop" Name="GurobiSetBestObjectiveBoundStop" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Optimisation will terminate if a feasible solution is found with objective value at least as good as BestObjectiveBoundStop.
	Note that BestObjectiveBoundStop should be a float, however an integer value can be given
	which will be automatically converted to a float.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, CutOff" Name="GurobiSetCutOff" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Optimisation will terminate if the objective value is worse than CutOff.
	Note that CutOff should be a float, an integer value can be given
	which will be automatically converted to a float.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, NumericFocus" Name="GurobiSetNumericFocus" Label="for IsGurobiModel, IsInt"/>
 <Returns>true
</Returns>
 <Description>
	Set the numeric focus for a model. Numeric focus must be in the set [0,1,2,3]. A numeric focus of <Math>0</Math> sets the
	numeric focus automatically, preferencing speed. Values between 1 and 3 increase the care taken in computations 
	as the value increases, but also take longer. The default value is 0.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, MIPFocus" Name="GurobiSetMIPFocus" Label="for IsGurobiModel, IsInt"/>
 <Returns>true
</Returns>
 <Description>
	Set the MIP focus for a model. The mip focus must be in the set [0,1,2,3], and the default value is 0.
	The MIP focus alows you to prioritise finding solutions or proving their optimality. See the Gurobi 
	documentation for more information.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, BestBdStop" Name="GurobiSetBestBoundStop" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Set the best bound stopping value for a model. Terminates optimisation as soon as the value
	of the best bound is determined to be at least as good as the best bound stopping value. Default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, BestBdStop" Name="GurobiSetSolutionLimit" Label="for IsGurobiModel, IsInt"/>
 <Returns>true
</Returns>
 <Description>
	Set the limit for the maximum number of MIP solutions to find.
	Default value is <Math>2,000,000,000</Math>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, IterationLimit" Name="GurobiSetIterationLimit" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Set the limit for the maximum number of simplex iterations performed. Default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, NodeLimit" Name="GurobiSetNodeLimit" Label="for IsGurobiModel, IsFloat"/>
 <Returns>true
</Returns>
 <Description>
	Set the limit for the maximum number of MIP nodes explored.
	The default value is infinity.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, Switch" Name="GurobiSetLogToConsole" Label="for IsGurobiModel, IsBool"/>
 <Returns>true
</Returns>
 <Description>
  Turns console logging on or off. If Switch is true the output of Gurobi will be printed to the screen,
	and if it is false the output will be supressed. The default for Gurobify is to supress the output.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, MethodType" Name="GurobiSetMethod" Label="for IsGurobiModel, IsInt"/>
 <Returns>true
</Returns>
 <Description>
	Set the method used to solve a model. 
	-1=automatic (this is the default),
	0=primal simplex,
	1=dual simplex,
	2=barrier,
	3=concurrent,
	4=deterministic concurrent,
	5=deterministic concurrent simplex.
	See the Gurobi documentation for more details.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Model, ThreadCount" Name="GurobiSetThreads" Label="for IsGurobiModel, IsInt"/>
 <Returns>true
</Returns>
 <Description>
	Set the number of threads Gurobi is allowed to use. The default value is 0,
	which will use as many cores as it wants. See the Gurobi documentation for more details.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Modifying_Other_Attributes_And_Parameters">
<Heading>Modifying Other Attributes And Parameters</Heading>

	In addition to these specific commands given in the previous section, other gurobi parameters and attributes of specific value types can be modified. The parameter or attribute name must be given as a strings exactly as stated in the Gurobi documentation. See the Appendix for links to the relevant documentation.
<P/>
<ManSection>
  <Func Arg="Model, ParameterName, ParameterValue" Name="GurobiSetIntegerParameter" />
 <Description>
	Takes a Gurobi model and assigns a value to a given integer-valued parameter.
	ParameterValue must be a integer value.
	Refer to the Gurobi documentation for a list of parameters and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, ParameterName, ParameterValue" Name="GurobiSetDoubleParameter" />
 <Description>
	Takes a Gurobi model and assigns a value to a given double-valued parameter.
	ParameterValue must be a double value.
	Refer to the Gurobi documentation for a list of parameters and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName, AttributeValue" Name="GurobiSetIntegerAttribute" />
 <Description>
	Takes a Gurobi model and assigns a value to a given integer-valued attribute.
	AttributeValue must be a double value.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName, AttributeValue" Name="GurobiSetDoubleAttribute" />
 <Description>
	Takes a Gurobi model and assigns a value to a given double-valued attribute.
	AttributeValue must be a double value.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Model, AttributeName, AttributeValueArray" Name="GurobiSetDoubleAttributeArray" />
 <Description>
	Takes a Gurobi model and assigns a value to a given attribute which takes an array of floats.
	AttributeValue must be an array of floats.
	Refer to the Gurobi documentation for a list of attributes and their types.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Additional_Functionality">
<Heading>Additional Functionality</Heading>

	This section provides information on some additional functionality which does
	not directly relate to Gurobi but may assist in using the Gurobify package. In particular, it details 
	functions which convert between characteristic vectors (which are more desirable for use with Gurobi) and sets (which may be more desirable for use in &GAP;).
<P/>
<ManSection>
  <Oper Arg="IndexSet, NumberOfIndices" Name="IndexSetToCharacteristicVector" Label="for IsList, IsPosInt"/>
 <Returns>Characterisitc vector
</Returns>
 <Description>
	Takes a list of integers which form a subset of the set [1 .. n], where n is the second argument,
	and converts the set of indices to its characteristic vector. For example, if n = 5, the set
	[1,3] would be converted to [1, 0, 1, 0, 0]. It is useful to be able to convert between the two,
	since Gurobify always takes the characteristic vector (for example when taking constraints),
	yet the set of indices is generally more helpful for the user.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="CharacteristicVector" Name="CharacteristicVectorToIndexSet" Label="for IsList"/>
 <Returns>Index set
</Returns>
 <Description>
	Takes a characteristic vector and returns the set of indices corresponding to it. This reverses the
	process which occurs with IndexSetToCharacteristicVector. It is particularly useful to convert the
	output of a Gurobi solution back in terms of the variables. For example, the characteristic vector
	[1, 0, 1, 0, 0] would return the index set [1,3]. Note that since the function expects a characteristic 
	vector it doesn't account for any weightings, and is only interested in whether or not the corresponding 
	index is present, and as such it rounds each entry to the nearest integer and checks that it is non-zero.
	Hence it is particularly suitable for use with binary variables. 
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Subset, FullSet" Name="SubsetToCharacteristicVector" Label="for IsList, IsList"/>
 <Returns>Characterisitc vector
</Returns>
 <Description>
	Takes a subset of some set, and returns the characteristic vector where the entries of the characteristic
	vector are indexed by the full set. For example, the subset ["c"] of ["a", "c", "n", "q"] would give the 
	characteristic vector [0, 1, 0, 0]. This removes the need to first find the index set of the subset.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Subset, FullSet" Name="SubsetToIndexSet" Label="for IsList, IsList"/>
 <Returns>Index set
</Returns>
 <Description>
	Takes a subset of some set, and returns the set of indices corresponding to it. For example, the subset ["a", "d"]
  of the set ["a", "b", "c", "d", "e"], would return the index set [1,4]. Note that since the method expects a subset (not a multiset) 
	vector it doesn't account for any weightings or repetition.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="CharacteristicVector" Name="CharacteristicVectorToSubset" Label="for IsList, IsList"/>
 <Returns>Subset
</Returns>
 <Description>
	Takes a characteristic vector and some set which it takes to be indexing the entries of the characteristic 
	vector. It then returns the subset of the full set corresponding to the non-zero entries of the characteristic 
	vector. This is the reverse process to SubsetToCharacteristicVector. Note again that the characteristic vector 
	is rounded to an integer before being compared to 0. As an example, the characteristic vector [0, 1, 0, 0] with 
	the set ["a", "c", "n", "q"] would return ["c"]. This removes the need to first return an index set before 
	finding the subset.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Gurobify_Section_Other">
<Heading>Other</Heading>

	This section documents Gurobify functionality not belonging in any of the other sections.
<P/>
<ManSection>
  <Func Arg="" Name="GurobiVersion" />
 <Returns>[ major_version, minor_version, technical_version ]
</Returns>
 <Description>
	This function returns a list [ major_version, minor_version, technical_version ] which
	indicates the Gurobi library version. For example, if using Gurobi Version 7.5.1, then
	GurobiVersion() would return [ 7, 5, 1 ].
 </Description>
</ManSection>


</Section>


</Chapter>

