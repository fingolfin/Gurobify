<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Getting_Started">
<Heading>Getting Started</Heading>

<Section Label="Chapter_Getting_Started_Section_Getting_Started">
<Heading>Getting Started</Heading>

This section contains a simple example which demonstrates some of the key functionality of Gurobify.
We demonstrate the following:
<List>
<Item>
Creation of a Gurobi model, including specifying variable types and names
</Item>
<Item>
Adding an objective function to the model and choosing its sense (maximise or minimise)
</Item>
<Item>
Adding constraints to a model individually
</Item>
<Item>
Adding multiple constraints to a model at one time
</Item>
<Item>
Deleting constraints from a model
</Item>
<Item>
Optimizing a model
</Item>
<Item>
Querying the optimisation status of a model
</Item>
<Item>
Displaying the solution to a feasible model
</Item>
<Item>
Setting a parameter (in this case the time limit)
</Item>
<Item>
Querying the current value of a parameter (again, the time limit)
</Item>
<Item>
Writing a model to a file
</Item>
<Item>
Reading a model from a file
</Item>
</List>
The purpose of this example is to illustrate the use of Gurobify in a quick, simple manner. The example itself is trivial, but the same proceedure applies for much more complex models. It only utilises some of the core commands available in Gurobify, though more commands are listed in detail in Chapter 3 "Using Gurobify", and further examples are given in Chapter 4 "Examples".
</Section>


<Section Label="Chapter_Getting_Started_Section_Simple_example">
<Heading>Simple example</Heading>

The first step in using gurobify is to create a model. To do this, we first need to define the types of variables
that are to be used in the model, and we may optionally give them names. In this case we create a model
with three binary variables, called <Math>x</Math>, <Math>y</Math> and <Math>z</Math>. We then define the objective function as <Math>x + 2 y + z</Math>, which we
set to be maximised.
<Example><![CDATA[
gap> model := GurobiNewModel(["BINARY", "BINARY", "BINARY"], ["x", "y", "z"]);
<object>
gap> GurobiSetObjectiveFunction( model, [1.,2.,1.] );
true
gap> GurobiMaximiseModel(model);
true
]]></Example>


Having defined our model, we can now add constraints. To do this, a list of the coefficients for each of the variables is given,
along with the sense of the equation (that is, <Math>=</Math>, <Math>\le</Math> or <Math>\ge</Math>), and the value on the right hand side of the constraint,
and optionally a name for the constraints.
Gurobi does not distinguish between <Math>\le</Math> and <Math>&lt;</Math> or <Math>\ge</Math> and <Math>&gt;</Math>, though we note that gurobify only accepts the form <Math>&lt;</Math> or <Math>&gt;</Math>.
We add constraints the <Math>2x + 2y + 2z \le 6</Math> and <Math>x + 2y + 3z \ge 5</Math> to our model. We do not assign them names.
<Example><![CDATA[
gap> GurobiAddConstraint(model, [2, 2, 2], "<", 6 );
true
gap> GurobiAddConstraint(model, [1, 2, 3], ">", 5 );
true
]]></Example>


Alternatively, the previous constraints could have been added simultaneously, by containing multiple constraints as entries of a list.
<Example><![CDATA[
gap> constraints :=  [[2, 2, 2], [1, 2, 3]];
[ [ 2, 2, 2 ], [ 1, 2, 3 ] ]
gap> sense := ["<", ">"];
[ "<", ">" ]
gap> rhs := [6,5];
[ 6, 5 ]
gap> GurobiAddMultipleConstraints( model, constraints, sense, rhs );
true
]]></Example>


We can now optimize the model. This will return an Gurobi opimiztion status code. More information on the status codes can be
found in the Appendix. A status code of <Math>2</Math> lets us know that the model was successfully optimized. We may then query the model's
solution.
<Example><![CDATA[
gap> GurobiOptimizeModel(model);
2
gap> GurobiSolution(model);
[ 1., 1., 1. ]
gap> GurobiReset(model);
]]></Example>


In addition to returning the optimisation status upon finishing optimisation, we can query the optimisation status
of a model directly at any point in time. It will give the status of the model at the point when it was last optimised.
<Example><![CDATA[
gap> GurobiOptimizationStatus(model);
2
]]></Example>


We can change the objective sense of the model so that Gurobi will look for a solution which minimises the objective function instead.
We then optimise the model and, if the optimisation is succesful, retun the solution.
<Example><![CDATA[
gap> GurobiMinimiseModel(model);
true
gap> GurobiOptimizeModel(model);
2
gap> GurobiSolution(model);                                
[ 0., 1., 1. ]
]]></Example>


We can write the model to a file so that we may use it later. We need to specify the file name, and the extension of the file name
will determine the type of file written. In this case we write the model to an lp file which we call "test.lp".
<Example><![CDATA[
gap> GurobiWriteToFile(model, "test.lp");
true
]]></Example>


It is also possible to read a model directly from a file. In this case it is not necessary to build the model from the ground up.
We will read in the model from the "test.lp" file that we created in the previous step.
<Example><![CDATA[
gap> re_model := GurobiReadModel("test.lp");
<object>
]]></Example>


We now add another constraint, <Math>x + y + z &gt; 3</Math>, to the model. Since we may want to remove this constraint later we give
it the name "Other Constraint". We optimise the model and since it returns a feasible optimisation status we return the solution.
<Example><![CDATA[
gap> GurobiAddConstraint(re_model, [1, 1, 1], ">", 3, "Other Constraint");
true
gap> GurobiOptimizeModel(re_model);
2
gap> GurobiSolution(re_model);
[ 1., 1., 1. ]
]]></Example>


We add another constraint, <Math>y + z &lt; 1</Math>, to the model and also call it "Other Constraint". We optimise the model, and get a
status code of <Math>3</Math>, indicating that the model has no feasible solutions.
<Example><![CDATA[
gap> GurobiAddConstraint(re_model, [0, 1, 1], "<", 1, "Other Constraint");
true
gap> GurobiOptimizeModel(re_model);
3
]]></Example>


Since we named the two additional constraints, we can delete them. This makes our model feasible again, and we get the same solution
as before.
<Example><![CDATA[
gap> GurobiDeleteConstraintsWithName(re_model, "Other Constraint");
true
gap> GurobiOptimizeModel(re_model);
2
gap> GurobiSolution(re_model);
[ 0., 1., 1. ]
]]></Example>


There are many parameters and attributes of Gurobi models which can be set and queried. For example, we may set the time limit
to something very small so that Gurobi terminates before finishing optimising. This returns a status code of <Math>9</Math>. We may then
change the time limit again to allow Gurobi more time to finish optimising and thus obtain a feasible solution again. Chapter 3
documents other parameters and attributes that Gurobify is able to modify.
<Example><![CDATA[
gap> GurobiSetTimeLimit(re_model, 0.000001);
true
gap> GurobiOptimizeModel(re_model); 
9
gap> GurobiSetTimeLimit(re_model, 10);
true
gap> GurobiOptimizeModel(re_model);
2
]]></Example>


We can query the model to find out what the current time limit value is set to.
<Example><![CDATA[
gap> GurobiTimeLimit(re_model);
10.
]]></Example>


</Section>


</Chapter>

