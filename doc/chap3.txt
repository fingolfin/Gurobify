  
  [1X3 [33X[0;0YUsing Gurobify[133X[101X
  
  [33X[0;0YThis  chapter  documents  the  various  commands available in Gurobify. Each
  command  begins  with  "Gurobi",  which  in  some  instances  helps to avoid
  conflict  with  other  [5XGAP[105X  commands,  and  is used for consistancy in other
  instances.  It  is  important  to  note  that many changes to a model do not
  become  active  until  the  model  is  updated.  This  can be done by either
  optimising  the model, or calling GurobiUpdateModel. It is often unnecessary
  to  update  the model if it will later be optimised, and in fact can be more
  efficient  to only update when necessary. However, one may occasionally wish
  to perform a command which is dependent on previous changes to the model. In
  this case it is necessary to call the update command first.[133X
  
  
  [1X3.1 [33X[0;0YCreating Or Reading A Model[133X[101X
  
  [33X[0;0YThis  section  deals  with reading, writing, and creating models, as well as
  working with the model variables.[133X
  
  [1X3.1-1 GurobiReadModel[101X
  
  [33X[1;0Y[29X[2XGurobiReadModel[102X( [3XModelFile[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ya Gurobi model.[133X
  
  [33X[0;0YTakes  a  model file, reads it and creates a Gurobi model from it. ModelFile
  is  the  name  of  the file as a string, with the appropriate extension, and
  including  the  path  if  the file is not located in the current GAP working
  directory.  Gurobi  accepts  files  of  type .mps, .rew, .lp, .rlp, .ilp, or
  .opb.  Refer  to  the gurobi documentation for more infomation on which file
  types can be read.[133X
  
  [1X3.1-2 GurobiWriteToFile[101X
  
  [33X[1;0Y[29X[2XGurobiWriteToFile[102X( [3XModel[103X, [3XFileName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YTakes  a  model  and writes it to a file. File type written is determined by
  the  FileName  suffix. File types include .mps, .rew, .lp, .rlp, .ilp, .sol,
  or .prm. Refer to the gurobi documentation for more infomation on which file
  types can be written.[133X
  
  [1X3.1-3 GurobiNewModel[101X
  
  [33X[1;0Y[29X[2XGurobiNewModel[102X( [3XVariableTypes[103X[, [3XVariableNames[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YA Gurobi model[133X
  
  [33X[0;0YCreates   a   gurobi   model   with   variables  defined  by  VariableTypes.
  VariableTypes must be a list of strings, where each entry is the type of the
  corresponding  variable. Accepted variable types are "CONTINUOUS", "BINARY",
  "INTEGER",  "SEMICONT",  or  "SEMIINT".  The  variable  types  are  not case
  sensitive.  Refer  to  the  Gurobi documentation for more information on the
  variable  types.  Optionally  takes  the names of the variables as a list of
  strings.  If  all  variables are of the same type, then you may instead give
  arguments  n,  v,  where  n is the number of variables and v is the variable
  type.[133X
  
  [1X3.1-4 GurobiSetVariableNames[101X
  
  [33X[1;0Y[29X[2XGurobiSetVariableNames[102X( [3XModel[103X, [3XVariableNames[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YAssigns  each  variable  a  new name from a list of names. The names must be
  strings.[133X
  
  
  [1X3.2 [33X[0;0YAdding And Deleting Constraints[133X[101X
  
  [33X[0;0YThis  section deals with adding linear constraints, both individually and in
  bulk, and also naming and deleting constraints.[133X
  
  [1X3.2-1 GurobiDeleteSingleConstraintWithName[101X
  
  [33X[1;0Y[29X[2XGurobiDeleteSingleConstraintWithName[102X( [3XModel[103X, [3XConstraintName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YDeletes  a  single  constraint from a model with the name ConstraintName. If
  multiple constraints have this name, then one will be deleted at random.[133X
  
  [1X3.2-2 GurobiDeleteConstraints[101X
  
  [33X[1;0Y[29X[2XGurobiDeleteConstraints[102X( [3XModel[103X, [3XConstraintName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YDeletes  all  constraints  from  a  model which are indexed by the values of
  ConstraintList. Requires an update to the model to take effect.[133X
  
  [1X3.2-3 GurobiDeleteConstraintsWithName[101X
  
  [33X[1;0Y[29X[2XGurobiDeleteConstraintsWithName[102X( [3XModel[103X, [3XConstraintName[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue/false[133X
  
  [33X[0;0YDeletes all constraints with the name ConstraintName[133X
  
  [1X3.2-4 GurobiAddConstraint[101X
  
  [33X[1;0Y[29X[2XGurobiAddConstraint[102X( [3XModel[103X, [3XConstraintEquation[103X, [3XConstraintSense[103X, [3XConstraintRHSValue[103X[, [3XConstraintName[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSame as below, except that ConstraintRHS value takes an integer value.[133X
  
  [1X3.2-5 GurobiAddConstraint[101X
  
  [33X[1;0Y[29X[2XGurobiAddConstraint[102X( [3XModel[103X, [3XConstraintEquation[103X, [3XConstraintSense[103X, [3XConstraintRHSValue[103X[, [3XConstraintName[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YAdds a constraint to a gurobi model. ConstraintEquation must be a list, such
  that  each  entry  is  the  coefficient  (including  [23X0[123X  coefficents)  of the
  corresponding  variable in the constraint equation. The ConstraintSense must
  be  one of "<", ">" or "=", where Gurobi interprets < as <= and > as >=. The
  ConstraintRHSValue  is the value on the right hand side of the constraint. A
  constraint  may  optionally  be  given  a  name, which helps to identify the
  constraint  if  it  is to be deleted at some point. If no constraint name is
  given,  then  a  constraint is simply assigned the name "UnNamedConstraint".
  Note  that  a  model  must  be  updated  or  optimised before any additional
  constraints become effective.[133X
  
  [1X3.2-6 GurobiAddMultipleConstraints[101X
  
  [33X[1;0Y[29X[2XGurobiAddMultipleConstraints[102X( [3XModel[103X, [3XConstraintEquations[103X, [3XConstraintSenses[103X, [3XConstraintRHSValues[103X[, [3XConstraintNames[103X] ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YAdd  multiple  constraints  to  a  model  at one time. The arguments (except
  Model) are lists, such that the i-th entries of each list determine a single
  constraint  in  the  same  manner  as for the operation GurobiAddConstraint.
  ConstraintNames  is  an  optional  argument,  and  must  be  given  for  all
  constraints,  or not at all. If ConstraintSenses and ConstraintRHSValues are
  all  the  same,  then rather than providing a list, one may simply provide a
  single string for the constraint sense and a single float or integer for the
  right hand side.[133X
  
  
  [1X3.3 [33X[0;0YAdding And Modifying Objective Functions[133X[101X
  
  [33X[0;0YThis section deals with adding and modifying objective functions to a model,
  and changing between maximising and minimising objective functions.[133X
  
  [1X3.3-1 GurobiMaximiseModel[101X
  
  [33X[1;0Y[29X[2XGurobiMaximiseModel[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSets  the  model sense to maximise. When the model is optimised, it will try
  to maximise the objective function.[133X
  
  [1X3.3-2 GurobiMinimiseModel[101X
  
  [33X[1;0Y[29X[2XGurobiMinimiseModel[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSets  the  model sense to minimise. When the model is optimised, it will try
  to minimise the objective function.[133X
  
  [1X3.3-3 GurobiSetObjectiveFunction[101X
  
  [33X[1;0Y[29X[2XGurobiSetObjectiveFunction[102X( [3XModel[103X, [3XObjectiveValues[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  objective  function  for  a  model.  ObjectiveValues  is a list of
  coefficients  (including  [23X0[123X  coefficeints)  corresponding  to  each  of  the
  variables[133X
  
  [1X3.3-4 GurobiObjectiveFunction[101X
  
  [33X[1;0Y[29X[2XGurobiObjectiveFunction[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YList of coefficients of the objective function[133X
  
  [33X[0;0YView the objective function for a model.[133X
  
  
  [1X3.4 [33X[0;0YOptimising A Model[133X[101X
  
  [33X[0;0YThis   section   deals  with  optimising  a  model,  and  handling  solution
  information.[133X
  
  [1X3.4-1 GurobiOptimiseModel[101X
  
  [33X[1;0Y[29X[2XGurobiOptimiseModel[102X( [3XModel[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10YOptimisation status code.[133X
  
  [33X[0;0YTakes  a Gurobi model and optimises it. Returns the optimisation status code
  which  indicates  the  outcome  of  the  optimisation.  A  status  code of 2
  indicates  that  a feasible solution was found, a status code of 3 indicates
  the  model is infeasible. There a number of other status codes. Refer to the
  Gurobi   documentation   for   more   information  about  status  codes,  or
  alternatively  see  the Appendix of this manual. The model itself is altered
  to  reflect the optimisation, and more information about it can be obatained
  using    other    commands,    in    particular   the   GurobiSolution   and
  GurobiObjectiveValue functions.[133X
  
  [1X3.4-2 GurobiReset[101X
  
  [33X[1;0Y[29X[2XGurobiReset[102X( [3XModel[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YReset  all information associated with an optimisation of the model, such as
  the optimisation status, the solution and the objective value.[133X
  
  [1X3.4-3 GurobiUpdateModel[101X
  
  [33X[1;0Y[29X[2XGurobiUpdateModel[102X( [3XModel[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YTakes  a  model  and  updates  it.  Changes  to  a model (such as changes to
  parameters  or  constraints)  are  not  processed  until the model is either
  updated or optimised.[133X
  
  [1X3.4-4 GurobiSolution[101X
  
  [33X[1;0Y[29X[2XGurobiSolution[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YSolution[133X
  
  [33X[0;0YDisplay the solution found for a successfuly optimised model. Note that if a
  solution  has not been optimised, is infeasible, or the optimisation was not
  completed,  then  this  will  return an error. Thus it is advisable to first
  check the optimisation status.[133X
  
  [1X3.4-5 GurobiObjectiveValue[101X
  
  [33X[1;0Y[29X[2XGurobiObjectiveValue[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Yobjective value[133X
  
  [33X[0;0YReturns the objective value of the current solution.[133X
  
  [1X3.4-6 GurobiOptimisationStatus[101X
  
  [33X[1;0Y[29X[2XGurobiOptimisationStatus[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Yoptimisation status code[133X
  
  [33X[0;0YReturns  the optimisation status code of the most recent optimisation. Refer
  to  the  Gurobi  documentation  for  more  on  the optimisation statuses, or
  alternatively refer to the Appendix of this manual.[133X
  
  [1X3.4-7 GurobiFindAllBinarySolutions[101X
  
  [33X[1;0Y[29X[2XGurobiFindAllBinarySolutions[102X( [3XModel[103X, [3XSize[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YSet of all solutions.[133X
  
  [33X[0;0YThis function finds all possible solutions of a given size, for a model with
  only  binary  variables.  Takes  a Gurobi model and repeatedly optimises it,
  each  time  adding  the  previous  solution as a constraint so that it isn't
  found again. This continues until all solutions are found, and then they are
  returned  as  a  set.  During  the  process the number of found solutions is
  displayed.  Note:  -  Only  for  models  where  every  variable  is a binary
  variable. - Only finds solution sets of a given size.[133X
  
  [1X3.4-8 GurobiFindAllBinarySolutions[101X
  
  [33X[1;0Y[29X[2XGurobiFindAllBinarySolutions[102X( [3XModel[103X, [3XSize[103X, [3XGroup[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YSet of all solutions.[133X
  
  [33X[0;0YThis function finds all possible solutions of a given size, for a model with
  only  binary  variables.  Same  as  above,  except  that  it  also  takes  a
  permutation  group  acting on the index set of variables. Instead of finding
  all  solutions  directly,  the  group  is used to find the orbit of each new
  solution,  and  these  are  then  all  returned  at  the  end,  and  used as
  constraints  until  then.  An option value may also be given which will only
  return  the representatives of each orbit of the solutions. Hence it returns
  all  the  unique  solutions up to equivalence under the group. This saves on
  memory,  and  the  remaing  solutions may be refound by generating the orbit
  under  the  group.  To  invoke  this  option  place  a colon after the group
  argument    and    then    put    representatives:=true   so   for   example
  GurobiFindAllSolutions(model, size, gp : representatives:=true);[133X
  
  
  [1X3.5 [33X[0;0YQuerying Attributes And Parameters[133X[101X
  
  [33X[0;0YThis   section   deals  with  obtaining  information  about  attributes  and
  parameters of a Gurobi model. Note that a model must be updated or optimised
  before  parameters  and attributes are updated - any queries will return the
  values  at  the time the model was last updated or optimised. Note also that
  the attributes are Gurobi attributes, and are not true attributes in the [5XGAP[105X
  sense.  Crucially,  attributes  for  a  model constantly change, either as a
  result  of  optimisation  or from manually setting them. Thus attributes for
  Gurobi   models  are  approximated  by  Gurobify  using  [5XGAP[105X  operations  or
  functions.  Their  usage should still be comfortable for users familiar with
  [5XGAP[105X attributes.[133X
  
  [1X3.5-1 GurobiNumberOfVariables[101X
  
  [33X[1;0Y[29X[2XGurobiNumberOfVariables[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YNumber of variables[133X
  
  [33X[0;0YReturns the number of variables in the model.[133X
  
  [1X3.5-2 GurobiNumberOfConstraints[101X
  
  [33X[1;0Y[29X[2XGurobiNumberOfConstraints[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YNumber of linear constraints[133X
  
  [33X[0;0YReturns the number of linear constraints in the model.[133X
  
  [1X3.5-3 GurobiObjectiveBound[101X
  
  [33X[1;0Y[29X[2XGurobiObjectiveBound[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Yobjective bound[133X
  
  [33X[0;0YReturns the best known bound on the objective value of the model.[133X
  
  [1X3.5-4 GurobiRunTime[101X
  
  [33X[1;0Y[29X[2XGurobiRunTime[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Yrun time of optimisation[133X
  
  [33X[0;0YReturns the wall clock runtime in seconds for the most recent optimisation.[133X
  
  [1X3.5-5 GurobiNumericFocus[101X
  
  [33X[1;0Y[29X[2XGurobiNumericFocus[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ynumeric focus[133X
  
  [33X[0;0YReturns  the  numeric focus value of the model. The numeric focus is a value
  in  the  set  [0,1,2,3].  A  numeric  focus  of  [23X0[123X  sets  the  numeric focus
  automatically,  preferencing speed. Values between 1 and 3 increase the care
  taken  in  computations  as  the  value increases, but also take longer. The
  default value is 0.[133X
  
  [1X3.5-6 GurobiTimeLimit[101X
  
  [33X[1;0Y[29X[2XGurobiTimeLimit[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytime limit[133X
  
  [33X[0;0YReturns the time limit for the model. The default value is infinity.[133X
  
  [1X3.5-7 GurobiCutOff[101X
  
  [33X[1;0Y[29X[2XGurobiCutOff[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ycutoff value[133X
  
  [33X[0;0YReturns  the  cutoff value for the model. Optimisation will terminate if the
  objective  value  is  worse  than  CutOff. The default value is infinity for
  minimisation, and negative infinity for maximisation.[133X
  
  [1X3.5-8 GurobiBestObjectiveBoundStop[101X
  
  [33X[1;0Y[29X[2XGurobiBestObjectiveBoundStop[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ybest objective bound limit value[133X
  
  [33X[0;0YReturns  the  best  objective  bound limit value for the model. Optimisation
  will terminate if a feasible solution is found with objective value at least
  as good as the best objective bound. The default value is negative infinity.[133X
  
  [1X3.5-9 GurobiMIPFocus[101X
  
  [33X[1;0Y[29X[2XGurobiMIPFocus[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YMIP focus[133X
  
  [33X[0;0YReturns  the MIP focus value for the model. The mip focus must be in the set
  [0,1,2,3], and the default value is 0. The MIP focus alows you to prioritise
  finding  solutions or proving their optimality. See the Gurobi documentation
  for more information.[133X
  
  [1X3.5-10 GurobiBestBoundStop[101X
  
  [33X[1;0Y[29X[2XGurobiBestBoundStop[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YBest bound stopping value[133X
  
  [33X[0;0YReturns the best bound stopping value for the model. Optimisation terminates
  as  soon as the value of the best bound is determined to be at least as good
  as the best bound stopping value. Default value is infinity.[133X
  
  [1X3.5-11 GurobiSolutionLimit[101X
  
  [33X[1;0Y[29X[2XGurobiSolutionLimit[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ysolution limit value[133X
  
  [33X[0;0YReturns  the  solution  limit  value  for  the  model. This value limits the
  maximum  number  of  MIP  solutions  that  will  be  found. Default value is
  [23X2,000,000,000[123X.[133X
  
  [1X3.5-12 GurobiIterationLimit[101X
  
  [33X[1;0Y[29X[2XGurobiIterationLimit[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YIteration limit[133X
  
  [33X[0;0YReturns  the iteration limit value for the model, which limits the number of
  simplex iterations performed during optimisation. Default value is infinity.[133X
  
  [1X3.5-13 GurobiNodeLimit[101X
  
  [33X[1;0Y[29X[2XGurobiNodeLimit[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YNode limit[133X
  
  [33X[0;0YReturns  the  node limit value for the model, which limits the number of MIP
  nodes explored during optimisation. The default value is infinity.[133X
  
  [1X3.5-14 GurobiVariableNames[101X
  
  [33X[1;0Y[29X[2XGurobiVariableNames[102X( [3XModel[103X ) [32X operation[133X
  
  [33X[0;0YReturns the names of the variables in the model. This list acts as the index
  set  for  any lists of variable coefficients, such as in GurobiAddConstraint
  or GurobiSetObjectiveFunction.[133X
  
  [1X3.5-15 GurobiLogToConsole[101X
  
  [33X[1;0Y[29X[2XGurobiLogToConsole[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue/false[133X
  
  [33X[0;0YReturns true if the Gurobi output is set to display to the screen, and false
  if the output is supressed. Gurobify suppresses the output by default.[133X
  
  [1X3.5-16 GurobiVariableTypes[101X
  
  [33X[1;0Y[29X[2XGurobiVariableTypes[102X( [3XModel[103X ) [32X operation[133X
  
  [33X[0;0YReturns the types of the variables in the model.[133X
  
  [1X3.5-17 GurobiMethod[101X
  
  [33X[1;0Y[29X[2XGurobiMethod[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YMethodType[133X
  
  [33X[0;0YReturns  the  method used to solve a model. See the Gurobi documentation for
  more details.[133X
  
  [1X3.5-18 GurobiThreads[101X
  
  [33X[1;0Y[29X[2XGurobiThreads[102X( [3XModel[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YThreadCount[133X
  
  [33X[0;0YReturns  number  of  threads  Gurobi  is  allowed  to  use.  See  the Gurobi
  documentation for more details.[133X
  
  
  [1X3.6 [33X[0;0YQuerying Other Attributes And Parameters[133X[101X
  
  [33X[0;0YIn  addition  to  the  specific queries given in the previous section, other
  gurobi  parameters  and  attributes  of  specific  value  types  can also be
  queried.  The  parameter or attribute name must be given as a string exactly
  as  stated  in  the  Gurobi documentation. See the Appendix for links to the
  relevant documentation.[133X
  
  [1X3.6-1 GurobiIntegerParameter[101X
  
  [33X[1;0Y[29X[2XGurobiIntegerParameter[102X( [3XModel[103X, [3XParameterName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yparameter value[133X
  
  [33X[0;0YTakes  a Gurobi model and retrieves the value of a integer-valued parameter.
  Refer to the Gurobi documentation for a list of parameters and their types.[133X
  
  [1X3.6-2 GurobiDoubleParameter[101X
  
  [33X[1;0Y[29X[2XGurobiDoubleParameter[102X( [3XModel[103X, [3XParameterName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yparameter value[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves the value of a double-valued parameter.
  Refer to the Gurobi documentation for a list of parameters and their types.[133X
  
  [1X3.6-3 GurobiIntegerAttribute[101X
  
  [33X[1;0Y[29X[2XGurobiIntegerAttribute[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute value[133X
  
  [33X[0;0YTakes a Gurobi model and retrieves the value of an integer-valued attribute.
  Refer to the Gurobi documentation for a list of attributes and their types.[133X
  
  [1X3.6-4 GurobiStringAttributeElement[101X
  
  [33X[1;0Y[29X[2XGurobiStringAttributeElement[102X( [3XModel[103X, [3Xposition[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute value[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves the value of a string attribute element
  at  a  given  position.  For  example  to  get the names of constraints with
  "ConstrName". Refer to the Gurobi documentation for a list of attributes and
  their types.[133X
  
  [1X3.6-5 GurobiDoubleAttribute[101X
  
  [33X[1;0Y[29X[2XGurobiDoubleAttribute[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute value[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves the value of a double-valued attribute.
  Refer to the Gurobi documentation for a list of attributes and their types.[133X
  
  [1X3.6-6 GurobiIntegerAttributeArray[101X
  
  [33X[1;0Y[29X[2XGurobiIntegerAttributeArray[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute array[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves an attribute array. Can only get values
  of  attributes  arrays  which  take  integer  values.  Refer  to  the Gurobi
  documentation for a list of attributes and their types.[133X
  
  [1X3.6-7 GurobiDoubleAttributeArray[101X
  
  [33X[1;0Y[29X[2XGurobiDoubleAttributeArray[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute array[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves an attribute array. Can only get values
  of  attributes  arrays  which  take  double  values.  Refer  to  the  Gurobi
  documentation for a list of attributes and their types.[133X
  
  [1X3.6-8 GurobiStringAttributeArray[101X
  
  [33X[1;0Y[29X[2XGurobiStringAttributeArray[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute array[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves an attribute array. Can only get values
  of  attributes  arrays  which  have  string  values.  Refer  to  the  Gurobi
  documentation for a list of attributes and their types.[133X
  
  [1X3.6-9 GurobiCharAttributeArray[101X
  
  [33X[1;0Y[29X[2XGurobiCharAttributeArray[102X( [3XModel[103X, [3XAttributeName[103X ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Yattribute array[133X
  
  [33X[0;0YTakes  a  Gurobi model and retrieves an attribute array. Can only get values
  of   attributes   arrays  which  have  char  values.  Refer  to  the  Gurobi
  documentation for a list of attributes and their types.[133X
  
  
  [1X3.7 [33X[0;0YModifying Attributes And Parameters[133X[101X
  
  [33X[0;0YThis section deals with modifying the values of attributes and parameters of
  Gurobi  models.  Note  that  a  model  must  be  updated or optimised before
  parameters  and attributes are updated. Any queries or commands which depend
  on  these  values will use the values at the time the model was last updated
  or optimised, even if the values have since been modified.[133X
  
  [1X3.7-1 GurobiSetTimeLimit[101X
  
  [33X[1;0Y[29X[2XGurobiSetTimeLimit[102X( [3XModel[103X, [3XTimeLimit[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  a time limit for a Gurobi model. Note that TimeLimit should be a float,
  however  an integer value can be given which will be automatically converted
  to a float.[133X
  
  [1X3.7-2 GurobiSetBestObjectiveBoundStop[101X
  
  [33X[1;0Y[29X[2XGurobiSetBestObjectiveBoundStop[102X( [3XModel[103X, [3XBestObjectiveBoundStop[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YOptimisation  will  terminate if a feasible solution is found with objective
  value    at   least   as   good   as   BestObjectiveBoundStop.   Note   that
  BestObjectiveBoundStop  should  be  a float, however an integer value can be
  given which will be automatically converted to a float.[133X
  
  [1X3.7-3 GurobiSetCutOff[101X
  
  [33X[1;0Y[29X[2XGurobiSetCutOff[102X( [3XModel[103X, [3XCutOff[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YOptimisation  will  terminate  if  the objective value is worse than CutOff.
  Note that CutOff should be a float, an integer value can be given which will
  be automatically converted to a float.[133X
  
  [1X3.7-4 GurobiSetNumericFocus[101X
  
  [33X[1;0Y[29X[2XGurobiSetNumericFocus[102X( [3XModel[103X, [3XNumericFocus[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  numeric  focus  for  a  model.  Numeric  focus  must be in the set
  [0,1,2,3].  A  numeric  focus  of  [23X0[123X  sets  the numeric focus automatically,
  preferencing  speed.  Values  between  1  and  3  increase the care taken in
  computations as the value increases, but also take longer. The default value
  is 0.[133X
  
  [1X3.7-5 GurobiSetMIPFocus[101X
  
  [33X[1;0Y[29X[2XGurobiSetMIPFocus[102X( [3XModel[103X, [3XMIPFocus[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  MIP focus for a model. The mip focus must be in the set [0,1,2,3],
  and  the  default  value is 0. The MIP focus alows you to prioritise finding
  solutions or proving their optimality. See the Gurobi documentation for more
  information.[133X
  
  [1X3.7-6 GurobiSetBestBoundStop[101X
  
  [33X[1;0Y[29X[2XGurobiSetBestBoundStop[102X( [3XModel[103X, [3XBestBdStop[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  best  bound stopping value for a model. Terminates optimisation as
  soon  as the value of the best bound is determined to be at least as good as
  the best bound stopping value. Default value is infinity.[133X
  
  [1X3.7-7 GurobiSetSolutionLimit[101X
  
  [33X[1;0Y[29X[2XGurobiSetSolutionLimit[102X( [3XModel[103X, [3XBestBdStop[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet the limit for the maximum number of MIP solutions to find. Default value
  is [23X2,000,000,000[123X.[133X
  
  [1X3.7-8 GurobiSetIterationLimit[101X
  
  [33X[1;0Y[29X[2XGurobiSetIterationLimit[102X( [3XModel[103X, [3XIterationLimit[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  limit  for  the  maximum  number  of simplex iterations performed.
  Default value is infinity.[133X
  
  [1X3.7-9 GurobiSetNodeLimit[101X
  
  [33X[1;0Y[29X[2XGurobiSetNodeLimit[102X( [3XModel[103X, [3XNodeLimit[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  limit  for  the  maximum number of MIP nodes explored. The default
  value is infinity.[133X
  
  [1X3.7-10 GurobiSetLogToConsole[101X
  
  [33X[1;0Y[29X[2XGurobiSetLogToConsole[102X( [3XModel[103X, [3XSwitch[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YTurns console logging on or off. If Switch is true the output of Gurobi will
  be  printed  to the screen, and if it is false the output will be supressed.
  The default for Gurobify is to supress the output.[133X
  
  [1X3.7-11 GurobiSetMethod[101X
  
  [33X[1;0Y[29X[2XGurobiSetMethod[102X( [3XModel[103X, [3XMethodType[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the  method  used to solve a model. -1=automatic (this is the default),
  0=primal  simplex,  1=dual simplex, 2=barrier, 3=concurrent, 4=deterministic
  concurrent, 5=deterministic concurrent simplex. See the Gurobi documentation
  for more details.[133X
  
  [1X3.7-12 GurobiSetThreads[101X
  
  [33X[1;0Y[29X[2XGurobiSetThreads[102X( [3XModel[103X, [3XThreadCount[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ytrue[133X
  
  [33X[0;0YSet  the number of threads Gurobi is allowed to use. The default value is 0,
  which  will  use as many cores as it wants. See the Gurobi documentation for
  more details.[133X
  
  
  [1X3.8 [33X[0;0YModifying Other Attributes And Parameters[133X[101X
  
  [33X[0;0YIn  addition to these specific commands given in the previous section, other
  gurobi  parameters  and  attributes of specific value types can be modified.
  The parameter or attribute name must be given as a strings exactly as stated
  in  the  Gurobi  documentation.  See  the Appendix for links to the relevant
  documentation.[133X
  
  [1X3.8-1 GurobiSetIntegerParameter[101X
  
  [33X[1;0Y[29X[2XGurobiSetIntegerParameter[102X( [3XModel[103X, [3XParameterName[103X, [3XParameterValue[103X ) [32X function[133X
  
  [33X[0;0YTakes  a  Gurobi  model  and  assigns  a  value  to  a  given integer-valued
  parameter.  ParameterValue  must  be  a  integer  value. Refer to the Gurobi
  documentation for a list of parameters and their types.[133X
  
  [1X3.8-2 GurobiSetDoubleParameter[101X
  
  [33X[1;0Y[29X[2XGurobiSetDoubleParameter[102X( [3XModel[103X, [3XParameterName[103X, [3XParameterValue[103X ) [32X function[133X
  
  [33X[0;0YTakes a Gurobi model and assigns a value to a given double-valued parameter.
  ParameterValue must be a double value. Refer to the Gurobi documentation for
  a list of parameters and their types.[133X
  
  [1X3.8-3 GurobiSetIntegerAttribute[101X
  
  [33X[1;0Y[29X[2XGurobiSetIntegerAttribute[102X( [3XModel[103X, [3XAttributeName[103X, [3XAttributeValue[103X ) [32X function[133X
  
  [33X[0;0YTakes  a  Gurobi  model  and  assigns  a  value  to  a  given integer-valued
  attribute.  AttributeValue  must  be  a  double  value.  Refer to the Gurobi
  documentation for a list of attributes and their types.[133X
  
  [1X3.8-4 GurobiSetDoubleAttribute[101X
  
  [33X[1;0Y[29X[2XGurobiSetDoubleAttribute[102X( [3XModel[103X, [3XAttributeName[103X, [3XAttributeValue[103X ) [32X function[133X
  
  [33X[0;0YTakes a Gurobi model and assigns a value to a given double-valued attribute.
  AttributeValue must be a double value. Refer to the Gurobi documentation for
  a list of attributes and their types.[133X
  
  [1X3.8-5 GurobiSetDoubleAttributeArray[101X
  
  [33X[1;0Y[29X[2XGurobiSetDoubleAttributeArray[102X( [3XModel[103X, [3XAttributeName[103X, [3XAttributeValueArray[103X ) [32X function[133X
  
  [33X[0;0YTakes a Gurobi model and assigns a value to a given attribute which takes an
  array  of  floats.  AttributeValue  must be an array of floats. Refer to the
  Gurobi documentation for a list of attributes and their types.[133X
  
  
  [1X3.9 [33X[0;0YAdditional Functionality[133X[101X
  
  [33X[0;0YThis  section  provides  information  on some additional functionality which
  does  not  directly  relate  to  Gurobi but may assist in using the Gurobify
  package.   In   particular,  it  details  functions  which  convert  between
  characteristic  vectors  (which  are more desirable for use with Gurobi) and
  sets (which may be more desirable for use in [5XGAP[105X).[133X
  
  [1X3.9-1 IndexSetToCharacteristicVector[101X
  
  [33X[1;0Y[29X[2XIndexSetToCharacteristicVector[102X( [3XIndexSet[103X, [3XNumberOfIndices[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YCharacterisitc vector[133X
  
  [33X[0;0YTakes a list of integers which form a subset of the set [1 .. n], where n is
  the  second  argument, and converts the set of indices to its characteristic
  vector. For example, if n = 5, the set [1,3] would be converted to [1, 0, 1,
  0,  0].  It  is useful to be able to convert between the two, since Gurobify
  always   takes   the   characteristic   vector   (for  example  when  taking
  constraints), yet the set of indices is generally more helpful for the user.[133X
  
  [1X3.9-2 CharacteristicVectorToIndexSet[101X
  
  [33X[1;0Y[29X[2XCharacteristicVectorToIndexSet[102X( [3XCharacteristicVector[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YIndex set[133X
  
  [33X[0;0YTakes  a  characteristic vector and returns the set of indices corresponding
  to     it.     This    reverses    the    process    which    occurs    with
  IndexSetToCharacteristicVector.  It  is  particularly  useful to convert the
  output of a Gurobi solution back in terms of the variables. For example, the
  characteristic vector [1, 0, 1, 0, 0] would return the index set [1,3]. Note
  that  since  the function expects a characteristic vector it doesn't account
  for   any  weightings,  and  is  only  interested  in  whether  or  not  the
  corresponding  index  is  present,  and  as such it rounds each entry to the
  nearest  integer  and  checks  that it is non-zero. Hence it is particularly
  suitable for use with binary variables.[133X
  
  [1X3.9-3 SubsetToCharacteristicVector[101X
  
  [33X[1;0Y[29X[2XSubsetToCharacteristicVector[102X( [3XSubset[103X, [3XFullSet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YCharacterisitc vector[133X
  
  [33X[0;0YTakes  a subset of some set, and returns the characteristic vector where the
  entries  of  the  characteristic  vector  are  indexed  by the full set. For
  example,   the  subset  ["c"]  of  ["a",  "c",  "n",  "q"]  would  give  the
  characteristic  vector [0, 1, 0, 0]. This removes the need to first find the
  index set of the subset.[133X
  
  [1X3.9-4 SubsetToIndexSet[101X
  
  [33X[1;0Y[29X[2XSubsetToIndexSet[102X( [3XSubset[103X, [3XFullSet[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YIndex set[133X
  
  [33X[0;0YTakes  a subset of some set, and returns the set of indices corresponding to
  it. For example, the subset ["a", "d"] of the set ["a", "b", "c", "d", "e"],
  would  return  the  index  set  [1,4].  Note that since the method expects a
  subset  (not  a  multiset)  vector  it doesn't account for any weightings or
  repetition.[133X
  
  [1X3.9-5 CharacteristicVectorToSubset[101X
  
  [33X[1;0Y[29X[2XCharacteristicVectorToSubset[102X( [3XCharacteristicVector[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10YSubset[133X
  
  [33X[0;0YTakes a characteristic vector and some set which it takes to be indexing the
  entries of the characteristic vector. It then returns the subset of the full
  set corresponding to the non-zero entries of the characteristic vector. This
  is  the reverse process to SubsetToCharacteristicVector. Note again that the
  characteristic  vector  is rounded to an integer before being compared to 0.
  As  an  example,  the  characteristic vector [0, 1, 0, 0] with the set ["a",
  "c",  "n", "q"] would return ["c"]. This removes the need to first return an
  index set before finding the subset.[133X
  
  
  [1X3.10 [33X[0;0YOther[133X[101X
  
  [33X[0;0YThis  section  documents  Gurobify functionality not belonging in any of the
  other sections.[133X
  
  [1X3.10-1 GurobiVersion[101X
  
  [33X[1;0Y[29X[2XGurobiVersion[102X(  ) [32X function[133X
  [6XReturns:[106X  [33X[0;10Y[ major_version, minor_version, technical_version ][133X
  
  [33X[0;0YThis    function    returns   a   list   [   major_version,   minor_version,
  technical_version ] which indicates the Gurobi library version. For example,
  if  using  Gurobi Version 7.5.1, then GurobiVersion() would return [ 7, 5, 1
  ].[133X
  
