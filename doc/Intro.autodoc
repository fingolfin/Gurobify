@Chapter Introduction
	@Section Welcome to Gurobify

Gurobify is a &GAP;<Cite Key="GAP4"/> package which provides an interface to the optimisation software Gurobi<Cite Key="gurobi"/>.
<Br/><Br/>
INSERT LICENCE INFO
<Br/><Br/>
Gurobify can be obtained from the Gurobify homepage:
* https://github.com/jesselansdown/Gurobify
Please use the issue tracker to inform me of any bugs or suggestions:
* https://github.com/jesselansdown/Gurobify/issues

	@Section Citing Gurobify

I am interested to know who is using Gurobify! If you obtain a copy I would appreciate it if you sent me an email to let me know. 
If Gurobify aids you in obtaining results that lead to a publication, please cite Gurobify as you would a paper. An example BibTeX entry for citing gurobify is given below. Please also send me an email informing me of the paper for my own interest.

@BeginLog
#! @manual{gurobify,
#!	Author = {Lansdown, Jesse},
#!	Key = {gurobify},
#!	Title = {{Gurobify -- A GAP interface to Gurobi, Version 1.0}},
#!	Url = {\verb+(https://github.com/jesselansdown/Gurobify/)+},
#!	Year = 2017}
@EndLog

Here is the entry in the APA style which may be used directly in the bibliography environment of your LaTeX document.

@BeginLog
#! \bibitem[Gurobify]{gurobify}
#!	J.~Lansdown.
#!	\newblock Gurobify -- A {GAP} interface to Gurobi, version 1.0, 2017.
@EndLog



	@Section Prerequisites

Gurobi requires the following software to be installed.

* &GAP; 4.8 (or later)

* Gurobi 7.0

* Autotools

Autotools may be installed on MacOSX using homebrew with the commands **brew install autoconf** and **brew install automake**.
If you want to regenerate the documentation for any reason, then the following will also be required.

* AutoDoc 2016.03.08 (or later)

* GAPDoc 1.5 (or later)

Although Gurobi is proprietary software, it is available free for academic use. According to the Gurobi website, 
$$ $$
"Gurobi makes most of our solvers available to recognized degree-granting academic institutions free of charge" <Cite Key="gurobiLicence2"/>,
<Br/><Br/>
and
<Br/><Br/>
"The free Academic License for Gurobi has all the features and performance of the full Gurobi Optimizer. A free Academic License  has no limits on model  size. The only  restrictions on the use of these licenses  are:

* They can only be used by faculty, students, or staff of a degree-granting academic institution

* They can only be used for research or educational purposes

* They must be validated from a recognized academic domain, as described below.

Note, free academic licenses expire twelve (12) months after the date on which your license was generated, but eligible faculty, students, or staff can renew a license by repeating the above process" <Cite Key="gurobiLicence1"/>.
<Br/><Br/>
For up-to-date information on Gurobi licences, please refer to the Gurobi website. A link can be found in the Appendix, or through a simple search online.





	@Section Installation

To install Gurobify, first unpack it in the pkg directory of the &GAP; installation directory. You may place Gurobify in a different location, so long as its parent directory is called "pkg". Installing Gurobify outside of the &GAP; root pkg directory is not recommended, but is useful for example when administrative privelages are needed to access the &GAP; root directory. Next run the following commands in the terminal from within the Gurobify directory.

@BeginLog
#! ./autogen.sh
#! ./congigure --with-gurobi=<gurobi path> [--with-gaproot=<gap path>]
#! make
@EndLog

The &#8208;-with-gurobi=&lt;gurobi path&gt; is a necessary argument, and normally looks something like this on MacOSX,
<Br/><Br/>

&#8208;-with-gurobi=/Library/gurobi701/mac64

<Br/><Br/>

or something like this on Linux,

<Br/><Br/>

&#8208;-with-gurobi=/opt/gurobi701/linux64

<Br/><Br/>

The [&#8208;-with-gaproot=&lt;gap path&gt;] is an optional argument, and is not normally necessary if Gurobify is placed in the pkg directory of the &GAP; root directory. If, however, Gurobify is located in a non-root pkg directory, then this argument must be included. It normally looks something like this,

<Br/><Br/>

&nbsp;&#8208;-with-gaproot=/opt/gap4r8/


	@Section Testing and documentation

To test the package is working correctly, run the following command from inside the Gurobify directory.

@BeginLog
#! gap.sh maketest.g
@EndLog

 It transforms each of the examples in Chapter 4 "Examples" and the example given in Section 2.2 "Simple example" into test cases to check that Gurobify is functioning correctly.
<Br/><Br/>
Within the Gurobify directory there is a subdirectory called "doc". This directory contains the documentaion for Gurobify in the form of a pdf file called "manual.pdf" as well as in html format. To access the html version of the manual, open the file called "chap0.html". The documentation can be regenerated by running the following command in the terminal from the Gurobify directory, though this should not be necessary.

@BeginLog
#! gap.sh makedoc.g
@EndLog

Regenerating the documentation will also automatically regenerate the "maketest.g" test file.

	@Section Loading Gurobify

Open &GAP; and load Gurobify with the command **LoadPackage("Gurobify");**. You should see something like the following.

@BeginLog
 LoadPackage("Gurobify");
#! -----------------------------------------------------------------------------
#! Loading  Gurobify 1.0 (Gurobify provides an interface to Gurobi from GAP.)
#! by Jesse Lansdown (www.jesselansdown.com).
#! Homepage: https://github.com/jesselansdown/Gurobify/
#! -----------------------------------------------------------------------------
#! true
@EndLog

Note that if you have Gurobify located somewhere other than the &GAP; root directory's pkg directory, then you must run &GAP; with the following command to enable &GAP; to find Gurobify.

@BeginLog
#! gap.sh -l ";/alternative/path/to/Gurobify"
@EndLog

where **/alternative/path/to/Gurobify** is the path to the directory which contains **/pkg/Gurobify** as subdirectories.


@Chapter Getting Started
	@Section Getting Started

This section contains a simple example which demonstrates some of the key functionality of Gurobify.
We demonstrate the following:
* Creation of a Gurobi model, including specifying variable types and names
* Adding an objective function to the model and choosing its sense (maximise or minimise)
* Adding constraints to a model individually
* Adding multiple constraints to a model at one time
* Deleting constraints from a model
* Optimizing a model
* Querying the optimisation status of a model
* Displaying the solution to a feasible model
* Setting a parameter (in this case the time limit)
* Querying the current value of a parameter (again, the time limit)
* Writing a model to a file
* Reading a model from a file

The purpose of this example is to illustrate the use of Gurobify in a quick, simple manner. The example itself is trivial, but the same proceedure applies for much more complex models. It only utilises some of the core commands available in Gurobify, though more commands are listed in detail in Chapter 3 "Using Gurobify", and further examples are given in Chapter 4 "Examples".

	@Section Simple example

@Chapter Using Gurobify

	jlkjlk

	@Section Creating or reading a model

	TODO intro to section

	@Section Adding and deleting constraints

	TODO

	@Section Adding and modifying objective functions


	@Section Optimizing a model

	TODO
	@Section Querying attributes and parameters

	Note that a model must be updated or optimized before parameters and attributes are updated, any queries will return the values at the time the model was last updated or optimized.

	@Section Querying other attributes and parameters

	In addition to these specific queries given in the previous section, all other gurobi parameters and attributes which take integer or double values can be queried using GurobiGetIntegerParameter("ParameterName"), GurobiGetDoubleParameter("ParameterName"), GurobiGetIntegerAttribute("AttributeName") or GurobiGetDoubleAttribute("AttributeName") respectively, where "ParameterName" and "AttributeName" are strings given exactly as in the Gurobi documentation. See the Appendix for links to the relevant documentation.

	@Section Modifying attributes and parameters

	Note that a model must be updated or optimized before parameters and attributes are updated, any queries will return the values at the time the model was last updated or optimized.

	@Section Modifying other attributes and parameters

	@Chapter Using Gurobify
		@Section Other

@Chapter Gurobify Functions

@Chapter Examples

This section contains a number of examples which are intended to illustrate the usage of Gurobify.

@Chapter Appendix
	@Section Links to some Gurobi documentation

For more information on Gurobi parameters, attributes, and status codes, see the following links:

* Attributes: http://www.gurobi.com/documentation/7.0/refman/attributes.html

* Parameters: http://www.gurobi.com/documentation/7.0/refman/parameters.html

* Status codes: https://www.gurobi.com/documentation/7.0/refman/optimization_status_codes.html

* Licencing: http://www.gurobi.com/products/licensing-pricing/licensing-overview

	@Section Optimisation Status Codes

The information in this section on optimisation status codes is taken directly from the Gurobi website<Cite Key="gurobiStatusCodes"/>.

* 1 -	Model is loaded, but no solution information is available.
* 2 - Model was solved to optimality (subject to tolerances), and an optimal solution is available.
* 3 - Model was proven to be infeasible.
* 4 -	Model was proven to be either infeasible or unbounded. To obtain a more definitive conclusion, set the DualReductions parameter to 0 and reoptimize.
* 5 - Model was proven to be unbounded. Important note: an unbounded status indicates the presence of an unbounded ray that allows the objective to improve without limit. It says nothing about whether the model has a feasible solution. If you require information on feasibility, you should set the objective to zero and reoptimize.
* 6 - Optimal objective for model was proven to be worse than the value specified in the Cutoff parameter. No solution information is available.
* 7 - Optimization terminated because the total number of simplex iterations performed exceeded the value specified in the IterationLimit parameter, or because the total number of barrier iterations exceeded the value specified in the BarIterLimit parameter.
* 8 - Optimization terminated because the total number of branch-and-cut nodes explored exceeded the value specified in the NodeLimit parameter.
* 9 - Optimization terminated because the time expended exceeded the value specified in the TimeLimit parameter.
* 10 - Optimization terminated because the number of solutions found reached the value specified in the SolutionLimit parameter.
* 11 - Optimization was terminated by the user.
* 12 - Optimization was terminated due to unrecoverable numerical difficulties.
* 13 - Unable to satisfy optimality tolerances; a sub-optimal solution is available.
* 14 - An asynchronous optimization call was made, but the associated optimization run is not yet complete.
* 15 - User specified an objective limit (a bound on either the best objective or the best bound), and that limit has been reached.

